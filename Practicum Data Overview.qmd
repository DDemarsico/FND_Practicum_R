---
title: "Practicum Data Overview"
format: html
editor: visual
---

# Practicum Data Overview:

# Introduction:

This R document has been created to standardize data cleaning for the FTD clinic. It should be used by anyone regardless of coding skill. Because of this, there will be far more documentation on what is being done that what is normal. Additionally, This form should be considered a living document, as new forms and data transformations will be required for different projects. To make this as organized as possible, let's set some rules:

-   **Do not make alterations to the code structure without putting your initials, date of change, and why in a comment. (Comments are created by using a hashtag '\#' and typing in the same line.)**

-   **At baseline, Patient Demographics and Psychiatric Comorbidities are the only two categories that are cleaned. If you want to add an entirely new section, please add it to the bottom of the document and create a new section via making the Text "Header 1". If you are updating an existing section, please reuse as much code as possible, and change only what is needed (i.e. variable names)**

-   **Finally, if you are making large scale changes, please update this information to the FND Clinic's GitHub. We will want to maintain version control so that standardization is maintained. If the FND GitHub is not operational, please save the file in the "Exporting" section as a distinctly named file, as to not overwrite existing files or create confusion.**

## Working in R-Studio/Quarto

For those who are entirely new to R, this will serve as the crash course to this document. R-Studio is what you're working in now. It's the graphical interface that let's you use R as a language. However, we're using R-studio to work within a Quarto project. A Quarto (or qmd) file is effectively a Word Document that you can code in. You can type anything you'd like, or embed pictures in the standard section. Think about R-Studio as Microsoft Word, and Quarto as a Word Document.

Writing is helpful, but we will need to code. You can hit Ctrl-Alt-i (or click Insert-\>Executable Cell -\>R) to create a code chunk:

```{r}
# Your code chunk will look like this. This is where all code is stored. It should have a grey background and look distinct from the text section.

# The '#' is used to create comments. That's what I'm doing right now! Even though I'm writing, the hashtag tells R that this is not code. This will be where short explanations of what is being done will be written. 

#To write code, make a new space using enter or return:
print("Hello World")

# This is the simplest amount of code, by hitting the little "play" button at the top, you'll see the text "Hello World" displayed. Hitting the play button will run all code within that chunk, but NOT any other chunks. The little downward arrow will run all code up to (but not including) the chunk you're looking at.
```

### Altering the code:

The good news for most people reading this document is... you will not have to change much in this document! In fact, it would be preferred that you change as little as possible. What will be required of you will most likely be changing names or variables in the code to fit your specific project. Let's use our Hello World code chunk as an example:

```{r}
# This is a good example of how code works. We're telling R to print out Hello World with this command. 
print("Hello World")

# But if we change what is in the quotes, the result will change as well.
print("Hello R")
```

This will be the most common change done in this document. If you're not very experienced with coding, this will most likely be the extent of your work in this document. But let's go into a slightly more complicated topic that will allow you to better understand what is being written.

## Variables:

This section is solely to orient you to what variables are and how they are created. By understanding how this works, you'll better understand R-Studio and this document.

So what is a Variable? Effectively, a variable is an "object" that stores a particular type of data. In R, it is effectively the same thing as a column in an Excel file. All values in a variable relate to a specific topic. Let's look at an example:

```{r}
# If you hit the play button in this chunk, you will see something pop-up in the Environment tab on the top-right of your screen. This is a newly created variable
numbers <- c(1,2,3,4,5)

# In R, variables are created by: Specifying its name, using '<-' as a command, and then what it will be filled with. In this example, it's filled with a list of numbers ranging from 1 - 5.
```

This is the basic building block for making variables. However, when two or more variables are combined, you create a dataset (or dataframe). A dataset is the term used for the excel document of raw data that will be used in this document.

```{r}

```

## Packages

```{r}
library(gitcreds)     # Required for pushing to Git for Version Control
library(readxl)       # Helps us read in excel docs sheet-by-sheet
library(tidyverse)    # Creates cleaner code and better readability
library(psych)        # Helpful for checking data distributions
library(ggplot2)      # The best visualization package 
library(plotly)       # Used for interactive charts from ggplot
library(MVN)          # Helpful for checking assumptions in MLR
library(stringr)      # Helpful for manipulating strings
library(RColorBrewer) # Makes charts look better
library(forcats)      # Helps Order viz in pleasing ways
```

## Data Import

Getting started, we'll begin by importing the dataset.

The data is stored in .xlsx format with two sheets. The first being in wide format (primary) and the second being in long format (medical history).

We'll use the readxl package to import both sheets separately:

```{r}

# Define the file path
file_path <- "C:\\Users\\domin\\Downloads\\nesDataPull_2-14-2025.xlsx"

# Read the first sheet
patient_info <- read_excel(file_path, sheet = 1)  # By index

# Read the second sheet
MedHx <- read_excel(file_path, sheet = 2)  # By index


```

Let's do a quick overview to check our import was successful

```{r}
head(patient_info)

head(MedHx)
```

## Comorbidities Formatting:

Everything looks good. However, I want one contiguous database with all of the data.

MedHx is in the long format. In this case, it's in the long format. I'll need to switch it to the wide format based on the variable: tblPatient::EXT_ID

```{r}

# We'll start by flipping the data to have each patient ID number as the observation. To do this, let's change the ID variable name into something easier.

MedHx$patient_id <- MedHx$`tblPatient::EXT_ID`

# Now get rid of the old name:

MedHx <- MedHx %>% select(-`tblPatient::EXT_ID`)

# Transforming from long format to wide format:

MedHx_Wide <- pivot_wider(MedHx, id_cols = patient_id, names_from = condition, values_from = -c(patient_id,condition, diagnosisClass))

head(MedHx_Wide)

```

### Data Concatenation:

Great, but we still have over 1,100 comorbidities. This isn't helpful, let's focus on some of the main ones and make a reduced dataframe:

Currently, we have many different variables that are measuring similar constructs. Let's break this down for Psych Disorders:

-   Depression:

    -   Major depressive disorder

    -   Depression

    -   Major depressive disorder (MDD)

    -   depression

    -   Unspecified depressive disorder

    -   major depressive disorder (MDD)

    -   situational depression

    -   Major Depressive disorder (MDD)

    -   Recurrent Major Depressive Disorder (HC CODE)

    -   Post Partum Depression

-   Anxiety

    -   Anxiety

    -   Generalized anxiety disorder (GAD)

    -   anxiety

    -   Generalized anxiety disorder

    -   Anxiety symptoms

    -   Anxiety disorder

    -   Occasional Anxiety

    -   Social anxiety disorder

    -   illness anxiety disorder

    -   seizure anxiety

    -   anxiety disorder

    -   generalized anxiety disorder (GAD)

    -   Anxiety Disorder

    -   Illness anxiety Disorder

-   PTSD

    -   PTSD

    -   Post traumatic stress disorder (PTSD)

    -   Trauma and stress related disorder

    -   Post Traumatic stress disorder (PTSD)

    -   complex PTSD

    -   post traumatic stress disorder (PTSD)

    -   trauma and stress related disorder

    -   C-PTSD

    -   Trauma

-   Bipolar

    -   bipolar 1 disorder

    -   Bipolar Disorder

    -   Bipolar Disorder 1

    -   Bipolar (type II)

    -   Bipolar 1 disorder

    -   Bipolar disorder

    -   Bipolar II disorder

    -   Bipolar Disorder II

    -   Bipolar I Disorder

    -   bipolar 2 disorder

    -   bipolar type I

-   Borderline PD

    -   borderline personality disorder

    -   Borderline Personality Disorder

    -   borderline and prominent dissociation

    -   Borderline personality disorder

    -   Borderline personality Disorder

We will need to combine these variables into groups for further analysis:

```{r}

# Let's start with Psych

# This chunk creates the MedHx_Psych_Full dataframe by using information from the MedHx_Wide dataframe. I want our new dataframe to only contain variables that have the words in quotes in their variable names. 

MedHx_Psych_Full <- MedHx_Wide %>%         
  select(patient_id, matches("depress|anxiety|PTSD|Borderline|Bipolar|Trauma|Personality", ignore.case = TRUE)) 

head(MedHx_Psych_Full)
```

### Dummy Coding Comorbidities.

Great, the data is flipped to wide, now we want it to be made to be 1s and 0s for dummy coding. Currently, the data is either coded as a string (1), or NULL. All variables are currently a list (except for ID), I want to convert them to double while maintaining their binary status.

```{r}

# We will mutate across all variables and make them 1 or zero. If the list contained a 1, then it will stay a 1, if the values were anything else, it will be 0. 

MedHx_Psych_Full <- MedHx_Psych_Full %>%
    mutate(across(where(is.list), ~ as.numeric(ifelse(lengths(.) > 0 & !sapply(., is.null), 1, 0))))

head(MedHx_Psych_Full)
```

#### General dummy codes

Now, that we have this complete list of binary codes, I also want to have dummy codes for broad levels of mental health comorbidities. This will be helpful, as many of our variables have differences in spelling or capitalization. This will create a coding system to capture all variables that fall under a general umbrella (i.e. depression, anxiety, etc).

```{r}

# Let's create a global dummy variable for depression: This chunk will go row-by-row in the MedHx_Psych_Full dataframe. The mutate function will create a new variable called 'depression_any'. This new variable will be populated with a 1 if any of the following binary disorder variable are coded as a 1. If non of these disorders are coded as a 1, then 'depression_any' will be coded as a 0.


MedHx_Psych_Full <- MedHx_Psych_Full %>%
  rowwise() %>%
   mutate(depression_any = as.numeric(any(c_across(c(`Major depressive disorder`, Depression, `Major depressive disorder (MDD)`, depression, `Unspecified depressive disorder`, `major depressive disorder (MDD)`, `situational depression`, `Major Depressive disorder (MDD)`, `Recurrent Major Depressive Disorder (HC CODE)`, `Post Partum Depression`)) == 1))) %>%
  ungroup()

# Same thing for Anxiety:
MedHx_Psych_Full <- MedHx_Psych_Full %>%
  rowwise() %>%
   mutate(anxiety_any = as.numeric(any(c_across(c(Anxiety, `Generalized anxiety disorder`, anxiety, `Generalized anxiety disorder`, `Anxiety symptoms`, `Anxiety disorder`, `Occasional Anxiety`, `Social anxiety disorder`, `illness anxiety disorder`, `seizure anxiety`, `anxiety disorder`, `generalized anxiety disorder (GAD)`, `Anxiety Disorder`, `Illness anxiety Disorder`, `Generalized anxiety disorder (GAD)`)) == 1))) %>%
  ungroup()

# Same thing for PTSD
MedHx_Psych_Full <- MedHx_Psych_Full %>%
  rowwise() %>%
   mutate(ptsd_any = as.numeric(any(c_across(c(PTSD, `Post traumatic stress disorder (PTSD)`, `Trauma and stress related disorder`, `Post Traumatic stress disorder (PTSD)`, `complex PTSD`, `post traumatic stress disorder (PTSD)`, `trauma and stress related disorder`, `C-PTSD`, Trauma)) == 1))) %>%
  ungroup()

# Same thing for Bipolar
MedHx_Psych_Full <- MedHx_Psych_Full %>%
  rowwise() %>%
   mutate(bipolar_any = as.numeric(any(c_across(c(`bipolar 1 disorder`, `Bipolar Disorder`, `Bipolar Disorder 1`, `Bipolar (type II)`, `Bipolar 1 disorder`, `Bipolar disorder`, `Bipolar II disorder`, `Bipolar Disorder II`, `Bipolar I Disorder`, `bipolar 2 disorder`, `bipolar type I`)) == 1))) %>%
  ungroup()

# Same thing for Borderline
MedHx_Psych_Full <- MedHx_Psych_Full %>%
  rowwise() %>%
   mutate(borderline_any = as.numeric(any(c_across(c(`borderline personality disorder`, `Borderline Personality Disorder`, `borderline and prominent dissociation`, `Borderline personaliy disorder`, `Borderline personality Disorder`)) == 1))) %>%
  ungroup()

# Lastly, I also want a combined personality disorder dummy as well
MedHx_Psych_Full <- MedHx_Psych_Full %>%
  rowwise() %>%
   mutate(pd_any = as.numeric(any(c_across(c(`Personality disorder`, `Obsessive compulsive personality disorder (OCPD)`, `schizoid personality`, `avoidant personality disorder`, `Antisocial Personality Disorder`, `Personality Disorder`)) == 1))) %>%
  ungroup()

```

### Further Reductions:

Now that we've concatenated some of the data for some of the most common comorbidities, I want to get rid of the previously mentioned variables (i.e. variables assessing the same thing but typed slightly different). This will create a cleaner database that is easier to merge with the primary patient dataframe.

```{r}

# Let's just select the variables that we want to keep in our dataset:

MedHx_Psych <- MedHx_Psych_Full %>% select(patient_id, `Obsessive compulsive personality disorder (OCPD)`, `schizoid personality`, `avoidant personality disorder`, `Antisocial Personality Disorder`, depression_any, anxiety_any, ptsd_any, bipolar_any, borderline_any, pd_any)

```

### Comorbidites Appendix:

Great, data cleaning for comorbidities is complete. As of 2/17/2025, we have only cleaned mental health comorbidities. If you are interested in any other form of comorbidities, you can select whatever diagnosis you would want and follow along from "Data Concatenation" tab.

![](images/clipboard-3083755900.png)

Please use this code chunk to add in whatever comorbidity you may be interested in by adding a '\|' after the last value but within the quotes. I also suggest changing 'MedHx_Psych_Full to another name. This will pull any variable into the newly created dataset which is named whatever you like. Please do not change the code for what exists. Only add new things in by copying, pasting, and editing the newly pasted code.

Note: Please notice how the first value is 'depress' rather than 'depression'. When looking through the variables, some diagnoses were labeled as 'depression' and some were labeled as 'depressive symptoms'. If I put 'Depression' in the quotes, it would not capture the 'depressive symptoms' variable. If this is the case for your variable of interest, I suggest using only as many characters as needed rather than spelling it out verbatim.

Once you have done this, continue this trend by using the subsequent code to filter out anything you want. This can be done by copying the existing code, pasting, and then altering the name of the dataframes called in the code chunk to match your given dataframe name. E.g. alter any point that says MedHx_Psych_Full to {insert_your_data_name_here}. Control-F is your friend for this.

# Patient Information:

## General Overview:

I want to get a basic sense of what this dataframe looks like from a demographics standpoint:

```{r}

# Let's look at the overall distribution:
describe(patient_info)

prop.table(table(patient_info$`tblPatient::Gender`))
prop.table(table(patient_info$`tblPatient::Race`))
prop.table(table(patient_info$c_insuranceAtBaseline))



```

That is helpful, but I also want to visualize some confusing elements. Specifically, I want visualize the distribution of insurance types and race:

```{r}

# Let's start with insurance

plot1 <- ggplot(patient_info, aes(x = c_insuranceAtBaseline)) +
            geom_bar() +
            theme_minimal() +
            labs(title = "Insurance Distributions", x = "Insurance Plans", y = "Count")
            theme(axis.text.x = element_text(angle = 90, hjust = 1))  
ggplotly(plot1)   # Convert to interactive plotly chart


# Let's do the same thing for race:
plot2 <- ggplot(patient_info, aes(x = `tblPatient::Race`)) +
            geom_bar() +
            theme_minimal() +
            labs(title = "Race Distribution", x = "Race", y = "Count")
            theme(axis.text.x = element_text(angle = 90, hjust = 1))  
ggplotly(plot2)   # Convert to interactive plotly chart
```

We are looking at:

-   A total of 1008 patients

-   A mean age of 39.5

-   74.4% female, 21.7% male, and .04% other

-   75.8% White

-   A large group coming from Colorado Health First, United, Cigna, Anthem, and United.

```         
-   The largest Cohort is Colorado Health First. This is effectively medicaid, and could be a good marker for SES.
```

## Preliminary Results:

Data entry has been spotty throughout both sheets. The primary issue is data entry points that are similar, but not fully the same. As a result, we're seeing a misleading spread of many different data points that are actually quite similar but are not captured as one value.

Before any actual analysis can be done, we'll need to do some intensive data cleaning to make any conclusions about this data.

# In My Data Cleaning Era

## Insurance

Let's start with the most egregious offender: Insurance:

What we'll need to do is

```{r}

# First, let's look at all the possible values of insurance before we concatenate

unique(patient_info$c_insuranceAtBaseline)
```

That is quite a lot: Let's begin by combining values:

#### **Medicaid/CHF - 55 entries**

-   Medicaid

-   Medicaid/Medicaid Health First

-   Medicaid/Medicaid health first

-   Colorado Access Medicaid/CO Access BH

-   Colorado Health First

-   Medicaid Health First

-   Out of state Medicaid

-   Colorado Medicaid/Medicaid Colorado Health First

-   Rocky Mountain Health Plan Medicaid

-   Denver Health Medicaid

-   Medicaid Colorado Health First RAE 2

-   CO Health First

-   Colorado Community Health Alliance

-   Colorado Medicaid Health First RAE5

-   Colorado Medicaid RAE 3

-   rae 3

-   Colorado Medicaid

-   Health Colorado- RAE 4

-   Medicaid - Colorado Community Health Alliance

-   Medicaid RAE 3

-   Texas Medicaid

-   Out of State Medicaid

-   Health Colorado, Inc.

-   Health First

-   Colorado Access

-   Health first

-   COLORADO HEALTH FIRST

-   CHF Community Health Alliance

-   CHA

-   Colorado Medicaid CCHA

-   Colorado health first

-   RAE 5

-   RAE 2

-   RAE 3

-   rae 5

-   UNLISTED MC

-   DENVER HEALTH MEDICAID

-   MEDICAID COLORADO HEALTH FIRST

-   RAE 4

-   comm Health

-   Comm Health Alliance

-   MMHP United Medicaid

-   Colorado Health First - RAE3

-   CO CHA

-   CHF Community Alliance

-   CHF RAE 3

-   comm health alli

-   CHF Region 5

-   CHF region 3

-   CHF RAE Region 3

-   Comm Health Alli

-   CCHA

-   Community Health Alliance

-   ER Health First

-   WY Medicaid

-   ROCKY MOUNTAIN HEALTH PLAN MC

#### BC/BS - 22

-   Anthem

-   Anthem/Anthem BC/BS Local PPO

-   Anthem Federal/Anthem BC BS Federal

-   UCHealth Anthem

-   Anthem/Anthem BC/BS

-   Anthem BC/BS

-   Anthem Pathway

-   Anthem TRX BDCT NM POB

-   Anthem BCBS

-   UCHealth Anthem BC/BS

-   Anthem Mountain Enhanced

-   Anthem Federal

-   CU Anthem

-   Anthem BC/BS of California

-   Anthem Federal BC/BS

-   ANTHEM BC/BS FEDERAL PPO

-   Anthem BCBS WY

-   UC Health Anthem

-   Anthem CU

-   Anthem bc/bs

-   CU Med

#### United - 23

-   United/United Healthcare Choice

-   United

-   United/UMR POS

-   United UMR PPO

-   United/United Health Choice Plus

-   United Healthcare Choice Plus

-   United Healthcare Choice

-   United Healthcare

-   United UMR

-   UHC Choice Plus

-   united

-   United/Nreca

-   Rocky Mountain Health Plan

-   Rocky Mountain Health Plans

-   Rocky Mountain Health

-   RMHP

-   Rocky Mtn Health Plan

-   RMHP United

#### Cigna - 9

-   Cigna/Cigna Local plus

-   Cigna/Cigna POS

-   Great West/Cigna

-   Great West

-   Cigna PPO

-   Cigna POS

-   cigna

-   Great West - Cigna

#### **Aetna - 7**

-   Aetna

-   AETNA

-   Aetna Whole Health

-   Aetna and Cofinity

-   Aetna POS

#### Veterans - 11

-   Tricare

-   VA Administration

-   Triwest Healthcare

-   Triwest

-   Va Veteran's Administration

-   Tricare Health Net Prime-West

-   Tricare Health Net West

-   TriWest

-   tricare health net

-   VA

-   TriCare

**Medicare - 24**

-   Medicare/Medicare A and B

-   Medicare

-   Medicare A and B

-   United/Medicare

-   Humana Medicare

-   Humana medicare

-   Medicare A & B

-   Denver Health Medicare

-   A & B

-   A&B

-   Medicare A&B

-   A &B

-   A and B

-   part A only

-   Humana/Medicare

-   KaiserMedicare

-   Medicare/Anthem

-   United Medicare/United Healthcare

-   Medicare/United

-   United Medicare

-   UNITED HEALTHCARE MC DUAL COMPLETE HMO

-   Cigna Medicare

-   Aetna/Medicare

-   Aetna Medicare

This totals to 117 patients being insured normally and 58 patients in the Other category

### Dummy variables:

Now that we know which variables go where, we'll need to create a dummy variable to hold these values. For our purposes, we will create a categorical variable with 7 levels. 6 of these levels will hold the categories we described in the previous section, and the 7th will be for the 'Other' Category.

```{r}

# To create a specific variable, I'm going to use the stringr packages to create a new categorical variable based on these results. The str_detect function takes the original variable, that registers the patterns in the string given in quotes, and markes the new variable 'insurance' as having a category named after the '~'.

# Wall of code incoming:


patient_info <- patient_info %>%
  mutate(insurance = case_when(grepl("Anthem|Anthem/Anthem BC/BS Local PPO|Anthem Federal/Anthem BC BS Federal|UCHealth Anthem|Anthem/Anthem BC/BS|Anthem BC/BS|Anthem Pathway|Anthem TRX BDCT NM POB|Anthem BCBS|UCHealth Anthem BC/BS|Anthem Mountain Enhanced|Anthem Federal|CU Anthem|Anthem BC/BS of California|Anthem Federal BC/BS|ANTHEM BC/BS FEDERAL PPO|Anthem BCBS WY|UC Health Anthem|Anthem CU|Anthem bc/bs|CU Med|United/United Healthcare Choice|United|United/UMR POS|United UMR PPO|United/United Health Choice Plus|United Healthcare Choice Plus|United Healthcare Choice|United Healthcare|United UMR|UHC Choice Plus|united|United/Nreca|Rocky Mountain Health Plan|Rocky Mountain Health Plans|Rocky Mountain Health|RMHP|Rocky Mtn Health Plan|RMHP United|Cigna/Cigna Local plus|Cigna/Cigna POS|Great West/Cigna|Great West|Cigna PPO|Cigna POS|cigna|Great West - Cigna|Aetna|AETNA|Aetna Whole Health|Aetna and Cofinity|Aetna POS", c_insuranceAtBaseline, ignore.case = TRUE) ~ "Private",
        
    grepl("Medicaid|Medicaid Health First|Medicaid/Medicaid health first|Colorado Access Medicaid/CO Access BH|Colorado Health First|Medicaid Health First|Out of state Medicaid|Colorado Medicaid/Medicaid Colorado Health First|Rocky Mountain Health Plan Medicaid|Denver Health Medicaid|Medicaid Colorado Health First RAE 2|CO Health First|Colorado Community Health Alliance|Colorado Medicaid Health First RAE5|Colorado Medicaid RAE 3|rae 3|Colorado Medicaid|Health Colorado- RAE 4|Medicaid - Colorado Community Health Alliance|Medicaid RAE 3|Texas Medicaid|Out of State Medicaid|Health Colorado, Inc.|Health First|Colorado Access|Health first|COLORADO HEALTH FIRST|CHF Community Health Alliance|CHA|Colorado Medicaid CCHA|Colorado health first|RAE 5|RAE 2|RAE 3|rae 5|UNLISTED MC|DENVER HEALTH MEDICAID|MEDICAID COLORADO HEALTH FIRST|RAE 4|comm Health|Comm Health Alliance|MMHP United Medicaid|Colorado Health First - RAE3|CO CHA|CHF Community Alliance|CHF RAE 3|comm health alli|CHF Region 5|CHF region 3|CHF RAE Region 3|Comm Health Alli|CCHA|Community Health Alliance|ER Health First|WY Medicaid|ROCKY MOUNTAIN HEALTH PLAN MC", c_insuranceAtBaseline, ignore.case = TRUE) ~ "Medicaid/CHF",

    
    
    grepl("Medicare/Medicare A and B|Medicare|Medicare A and B|United/Medicare|Humana Medicare|Humana medicare|Denver Health Medicare|A & B|A&B|Medicare A&B|A &B|A and B|part A only|Humana/Medicare|Kaiser Medicare|Medicare/Anthem|United Medicare/United Healthcare|Medicare/United|United Medicare|UNITED HEALTHCARE MC DUAL COMPLETE HMO|Cigna Medicare|Aetna/Medicare", c_insuranceAtBaseline, ignore.case = TRUE) ~ "Medicare",
    
      
    
    grepl("Tricare|VA Administration|Triwest Healthcare|Triwest|Va Veteran's Administration|Tricare Health Net Prime_West|Tricare Health Net West|TriWest|tricare health net|VA|TriCare", c_insuranceAtBaseline, ignore.case = TRUE) ~ "Veteran/ASM",
    
    TRUE ~ "Other"  # Default category for everything else
  ))



```

Great, now let's plot this again to see if it looks cleaner:

```{r}
plot1 <- ggplot(patient_info, aes(x = fct_rev(fct_infreq(insurance)), fill = insurance)) +
            geom_bar() +
            scale_fill_brewer(palette = "Set3") +
            theme_minimal() +
            labs(title = "Insurance Distributions", x = "Insurance Plans", y = "Number of Patients") + 
            theme(axis.text.x = element_text(angle = 90, hjust = 1))  
ggplotly(plot1)   # Convert to interactive plotly chart
```

Excellent! Our insurance distributions look much more balanced now. Private insurance and Medicaid users have the largest amount of patients. Medicare and Veteran's care follow behind.

## Race:

Given the rather shallow distributions of race, it makes sense to categorize our race variable as White and Non-White. Per usual, white individuals make up over 70% of the FND clinic's patient population. Combining this into a binary variable will give us more power to assess the effects of treatment on our non-white patients with more efficiency rather than comparing super small numbers.

```{r}

patient_info <- patient_info %>%
  mutate(race = case_when(
    grepl("White", `tblPatient::Race`, ignore.case = TRUE) ~ "White",
    
    TRUE ~ "Other"  # Default category for everything else
  ))      
          
```

```{r}
plot2 <- ggplot(patient_info, aes(x = fct_rev(fct_infreq(race)), fill = race)) +
            geom_bar() +
            scale_fill_brewer(palette = "Set1") +
            theme_minimal() +
            labs(title = "Race Distributions", x = "Race Binary Variable", y = "Number of Patients") + 
            theme(axis.text.x = element_text(angle = 90, hjust = 1))  
ggplotly(plot2)   # Convert to interactive plotly chart
```

This distribution, while still very skewed, gives us a much larger N (n = 257) to use to assess differences between white and non-white patients

## Disability

Disability has a wide variety of different forms of for specific patients. There are 16 different categories for Disability. For simplicity, I want to separate this variable into a binary variables for patients that are on disability and those that do not.

Please note: the no disability category does not account for patients who are attempting to get disability. If you want this, please change this code:

```{r}
unique(patient_info$`tblDisability::type`)
```

-   No Disability

    -   Not Pursuing

    -   Denied

    -   SS Denied

    -   Interested

    -   Pursuing

    -   Retired

```{r}
patient_info <- patient_info %>%
  mutate(disability = case_when(
    grepl("Not Pursuing|Denied|SS Denied|Interested|Pursuing|Retired", `tblDisability::type`, ignore.case = TRUE) ~ "No Disability",
    
    TRUE ~ "Disability"  # Default category for everything else
  )) 
```

Now let's plot this and see our result:

```{r}

plot4 <- ggplot(patient_info, aes(x = fct_rev(fct_infreq(disability)), fill = disability)) +
            geom_bar() +
            scale_fill_brewer(palette = "Set1") +
            theme_minimal() +
            labs(title = "Disability Status", y = "Number of Patients") + 
            theme(axis.text.x = element_text(angle = 90, hjust = 1))  
ggplotly(plot4) 
```

## Onset/Dx time (Months)

I want to look at the time between symptom onset and diagnosis. Currently the variable is a string. Let's assess the unique values to make sure conversion to a double is feasible.

```{r}
unique(patient_info$`tblFND::c_TimeBetweenOnsetAndDiagnosisMonths`)
```

Ok, so everything can be an integer. But we'll need to switch a couple of things. First off, it looks like the time in months isn't consistent in this dataset. Some of the values are input as days. It looks like everything greater than \|20,000\| needs to be divided by 31.

```{r}
patient_info$Sx_Dx_time <- as.numeric(patient_info$`tblFND::c_TimeBetweenOnsetAndDiagnosisMonths`)
```

Great, the "?" and NA variable will be marked as NA due to coercion. Everything is numeric. Now let's change the variable to alter the day values into month.

```{r}

# Divide the observations that have an absolute value greater than 20000 by 31
patient_info$Sx_Dx_time <- ifelse(abs(patient_info$Sx_Dx_time) > 20000, patient_info$Sx_Dx_time / 31, patient_info$Sx_Dx_time)

# Now make all observations below 20000 absolute values:
patient_info$Sx_Dx_time <- abs(patient_info$Sx_Dx_time)

# Review of all unique entries
unique(patient_info$Sx_Dx_time)
```

## Trauma + Amount

We'll deal with two variables in this section: Trauma and \# of traumatic events. Both of these variables are strings. I want both of them to be double. I want Trauma to be binary with a label for 1 being trauma and 0 being no trauma. I want \# of events to be a continuous variable.

```{r}

# Let's check both variables for unique values, just in case:
unique(patient_info$`tblFND::traumaHX`)

# Ok, this is sufficient. I will move Unknown into NA as well.
patient_info$trauma <- ifelse(patient_info$`tblFND::traumaHX` == "Yes", 1, 0)
summary(patient_info$trauma)

# Now let's check unique values for # of events
unique(patient_info$`tblFND::c_#ofTraumaEvents`)

# Great, everything is all set, let' set this to numeric
patient_info$trauma_events <- as.numeric(patient_info$`tblFND::c_#ofTraumaEvents`)
summary(patient_info$trauma_events)
```

# Outcome variables:

Great, now we'll need some to create outcome variables: Let's start with baseline frequency.

## Baseline Frequency:

This one is a bit interesting, as the value of freqBaseline is different based on the category in baselineFreq. So first, we'll change the values to numeric, then we can alter the values to fit better into our plan.

```{r}

#First, let's change baseline amount to numeric.
patient_info$baseline_seizure <- as.numeric(patient_info$`tblFND::freqBaseline`)
unique(patient_info$baseline_seizure)

# Great, now let's start transforming the variable based on baselinFreq. Let's start with the month variable.
patient_info$baseline_seizure <- ifelse(patient_info$`tblFND::baselineFreq` == "Month", patient_info$baseline_seizure / 4, patient_info$baseline_seizure)

# Now we want to do the same thing, but for the day category. If it's in the day category, make it multiplied by 7.
patient_info$baseline_seizure <- ifelse(patient_info$`tblFND::baselineFreq` == "Day", patient_info$baseline_seizure * 7, patient_info$baseline_seizure)

# Review:
summary(patient_info$baseline_seizure)

# The max value of 1400 seems odd, let's check the unique values and see what subject this is.
unique(patient_info$baseline_seizure)
which(patient_info$baseline_seizure == 1400)

# Ok, so we are finding that there are a few patients that have exceptionally high amounts. I suspect that these are data entry errors. For our purposes I will be moving them to N/A in order to better see the data. I will list their observation numbers and total number of weekly cases if they do end up being accurate.
# Subject 202: 1260
# Subject 454 & 482: 1225
# Subject 983: 1400

# This will censor these values as they are all over 1000. This can be disregarded if these patient's values are correct.
patient_info$baseline_seizure <- ifelse(patient_info$baseline_seizure > 1000, NA, patient_info$baseline_seizure)
```

# Merging Datasets.

Now that everything is cleaned, let's combine the MedHx and the Patient Info:

```{r}
patient_info$patient_id <- patient_info$`tblPatient::EXT_ID`

Merged_DB <- merge(patient_info, MedHx_Psych, by = "patient_id")

```

## Exporting:

Great, we now have a finished document, let's export this to a csv for use in other projects:

```{r}
write.csv(Merged_DB,"C:\\Users\\domin\\Downloads\\FND_Cleaned_Data.csv", row.names = FALSE)
```
